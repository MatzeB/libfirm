// Add32(VAR_0,IMM_1) ==> ia32_Lea_imm
static ir_node *transform_f1663153(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (x86_match_immediate(&tmp_imm, get_irn_n(node, 1), 'g')) {
		if (var1 == NULL) {
			var1 = ia32_create_Immediate_full(get_irn_irg(block), &tmp_imm);
		} else if (!x86_imm32_equal(&get_ia32_immediate_attr(var1)->imm, &tmp_imm)) {
			return NULL;
		}
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Lea(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; get_ia32_attr(new_node)->addr.immediate = get_ia32_immediate_attr(is_ia32_Immediate(var1) ? var1 : be_transform_node(var1))->imm; set_ia32_commutative(new_node);
	return new_node;
}
// Add32(IMM_1,VAR_0) ==> ia32_Lea_imm
static ir_node *transform_f1663154(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (x86_match_immediate(&tmp_imm, get_irn_n(node, 0), 'g')) {
		if (var1 == NULL) {
			var1 = ia32_create_Immediate_full(get_irn_irg(block), &tmp_imm);
		} else if (!x86_imm32_equal(&get_ia32_immediate_attr(var1)->imm, &tmp_imm)) {
			return NULL;
		}
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Lea(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; get_ia32_attr(new_node)->addr.immediate = get_ia32_immediate_attr(is_ia32_Immediate(var1) ? var1 : be_transform_node(var1))->imm; set_ia32_commutative(new_node);
	return new_node;
}
// Add32(VAR_0,const32[4294967295]) ==> ia32_Dec
static ir_node *transform_f1663155(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(node, 1)) && tarval_cmp(get_Const_tarval(get_irn_n(node, 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(node, 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Dec(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Add32(const32[4294967295],VAR_0) ==> ia32_Dec
static ir_node *transform_f1663156(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(node, 0)) && tarval_cmp(get_Const_tarval(get_irn_n(node, 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(node, 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Dec(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Add32(const32[1],VAR_0) ==> ia32_Inc
static ir_node *transform_f1663157(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(node, 0)) && tarval_cmp(get_Const_tarval(get_irn_n(node, 0)), new_tarval_from_long(1, get_irn_mode(get_irn_n(node, 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Inc(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Add32(VAR_0,const32[1]) ==> ia32_Inc
static ir_node *transform_f1663158(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(node, 1)) && tarval_cmp(get_Const_tarval(get_irn_n(node, 1)), new_tarval_from_long(1, get_irn_mode(get_irn_n(node, 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Inc(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Add32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3) ==> ia32_Add_src_index
static ir_node *transform_f1663159(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 1 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 1)) {
		var3 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Add(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))) ==> ia32_Add_src_index
static ir_node *transform_f1663160(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Add32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3) ==> ia32_Add_src_index
static ir_node *transform_f1663161(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 1 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 1)) {
		var3 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Add(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))) ==> ia32_Add_src_index
static ir_node *transform_f1663162(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Add32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3) ==> ia32_Add_src_index
static ir_node *transform_f1663163(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 1 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 1)) {
		var3 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Add(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))) ==> ia32_Add_src_index
static ir_node *transform_f1663164(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Add32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3) ==> ia32_Add_src_index
static ir_node *transform_f1663165(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 1 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 1)) {
		var3 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Add(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))) ==> ia32_Add_src_index
static ir_node *transform_f1663166(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Add32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2) ==> ia32_Add_src
static ir_node *transform_f1663167(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 1 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(node, 1)) {
		var2 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Add(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_1,VAR_0)) ==> ia32_Add_src
static ir_node *transform_f1663168(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Add32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1)))) ==> ia32_Add_src_index
static ir_node *transform_f1663169(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 0)) {
		var3 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 1)) && get_Proj_num(get_irn_n(node, 1)) == 1 && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 1))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Add(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))) ==> ia32_Add_src_index
static ir_node *transform_f1663170(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Add32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0)))) ==> ia32_Add_src_index
static ir_node *transform_f1663171(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 0)) {
		var3 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 1)) && get_Proj_num(get_irn_n(node, 1)) == 1 && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 1))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Add(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))) ==> ia32_Add_src_index
static ir_node *transform_f1663172(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Add32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1)))) ==> ia32_Add_src_index
static ir_node *transform_f1663173(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 0)) {
		var3 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 1)) && get_Proj_num(get_irn_n(node, 1)) == 1 && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 1))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Add(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))) ==> ia32_Add_src_index
static ir_node *transform_f1663174(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Add32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0)))) ==> ia32_Add_src_index
static ir_node *transform_f1663175(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 0)) {
		var3 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 1)) && get_Proj_num(get_irn_n(node, 1)) == 1 && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 1))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Add(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))) ==> ia32_Add_src_index
static ir_node *transform_f1663176(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Add32(VAR_2,PROJ_1(load32(VAR_1,VAR_0))) ==> ia32_Add_src
static ir_node *transform_f1663177(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(node, 0)) {
		var2 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 1)) && get_Proj_num(get_irn_n(node, 1)) == 1 && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 1))) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Add(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_1,VAR_0)) ==> ia32_Add_src
static ir_node *transform_f1663178(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Add32(VAR_0,VAR_1) ==> ia32_Lea
static ir_node *transform_f1663179(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(node, 1)) {
		var1 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Lea(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node);
	return new_node;
}
// Add32(VAR_1,VAR_0) ==> ia32_Lea
static ir_node *transform_f1663180(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Add(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(node, 0)) {
		var1 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Lea(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node);
	return new_node;
}
// And32(IMM_1,VAR_0) ==> ia32_And
static ir_node *transform_f1663181(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_And(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (x86_match_immediate(&tmp_imm, get_irn_n(node, 0), 'g')) {
		if (var1 == NULL) {
			var1 = ia32_create_Immediate_full(get_irn_irg(block), &tmp_imm);
		} else if (!x86_imm32_equal(&get_ia32_immediate_attr(var1)->imm, &tmp_imm)) {
			return NULL;
		}
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_And(dbgi, block, noreg_GP, noreg_GP, nomem, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// And32(VAR_0,IMM_1) ==> ia32_And
static ir_node *transform_f1663182(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_And(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (x86_match_immediate(&tmp_imm, get_irn_n(node, 1), 'g')) {
		if (var1 == NULL) {
			var1 = ia32_create_Immediate_full(get_irn_irg(block), &tmp_imm);
		} else if (!x86_imm32_equal(&get_ia32_immediate_attr(var1)->imm, &tmp_imm)) {
			return NULL;
		}
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_And(dbgi, block, noreg_GP, noreg_GP, nomem, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// And32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3) ==> ia32_And_src_index
static ir_node *transform_f1663183(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_And(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 1 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 1)) {
		var3 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_And(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))) ==> ia32_And_src_index
static ir_node *transform_f1663184(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// And32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3) ==> ia32_And_src_index
static ir_node *transform_f1663185(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_And(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 1 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 1)) {
		var3 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_And(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))) ==> ia32_And_src_index
static ir_node *transform_f1663186(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// And32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2) ==> ia32_And_src
static ir_node *transform_f1663187(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_And(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 1 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(node, 1)) {
		var2 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_And(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_1,VAR_0)) ==> ia32_And_src
static ir_node *transform_f1663188(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// And32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0)))) ==> ia32_And_src_index
static ir_node *transform_f1663189(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_And(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 0)) {
		var3 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 1)) && get_Proj_num(get_irn_n(node, 1)) == 1 && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 1))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_And(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))) ==> ia32_And_src_index
static ir_node *transform_f1663190(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// And32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1)))) ==> ia32_And_src_index
static ir_node *transform_f1663191(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_And(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 0)) {
		var3 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 1)) && get_Proj_num(get_irn_n(node, 1)) == 1 && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 1))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_And(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))) ==> ia32_And_src_index
static ir_node *transform_f1663192(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// And32(VAR_2,PROJ_1(load32(VAR_1,VAR_0))) ==> ia32_And_src
static ir_node *transform_f1663193(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_And(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(node, 0)) {
		var2 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 1)) && get_Proj_num(get_irn_n(node, 1)) == 1 && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 1))) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_And(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_1,VAR_0)) ==> ia32_And_src
static ir_node *transform_f1663194(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// And32(VAR_0,VAR_1) ==> ia32_And
static ir_node *transform_f1663195(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_And(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(node, 1)) {
		var1 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_And(dbgi, block, noreg_GP, noreg_GP, nomem, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// And32(VAR_1,VAR_0) ==> ia32_And
static ir_node *transform_f1663196(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_And(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(node, 0)) {
		var1 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_And(dbgi, block, noreg_GP, noreg_GP, nomem, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Eor32(VAR_0,IMM_1) ==> ia32_Xor
static ir_node *transform_f1663197(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Eor(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (x86_match_immediate(&tmp_imm, get_irn_n(node, 1), 'g')) {
		if (var1 == NULL) {
			var1 = ia32_create_Immediate_full(get_irn_irg(block), &tmp_imm);
		} else if (!x86_imm32_equal(&get_ia32_immediate_attr(var1)->imm, &tmp_imm)) {
			return NULL;
		}
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Xor(dbgi, block, noreg_GP, noreg_GP, nomem, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Eor32(IMM_1,VAR_0) ==> ia32_Xor
static ir_node *transform_f1663198(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Eor(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (x86_match_immediate(&tmp_imm, get_irn_n(node, 0), 'g')) {
		if (var1 == NULL) {
			var1 = ia32_create_Immediate_full(get_irn_irg(block), &tmp_imm);
		} else if (!x86_imm32_equal(&get_ia32_immediate_attr(var1)->imm, &tmp_imm)) {
			return NULL;
		}
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Xor(dbgi, block, noreg_GP, noreg_GP, nomem, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Eor32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1)))) ==> ia32_Xor_src_index
static ir_node *transform_f1663199(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Eor(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 0)) {
		var3 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 1)) && get_Proj_num(get_irn_n(node, 1)) == 1 && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 1))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Xor(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))) ==> ia32_Xor_src_index
static ir_node *transform_f1663200(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Eor32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0)))) ==> ia32_Xor_src_index
static ir_node *transform_f1663201(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Eor(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 0)) {
		var3 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 1)) && get_Proj_num(get_irn_n(node, 1)) == 1 && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 1))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Xor(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))) ==> ia32_Xor_src_index
static ir_node *transform_f1663202(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Eor32(VAR_2,PROJ_1(load32(VAR_1,VAR_0))) ==> ia32_Xor_src
static ir_node *transform_f1663203(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Eor(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(node, 0)) {
		var2 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 1)) && get_Proj_num(get_irn_n(node, 1)) == 1 && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 1))) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Xor(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_1,VAR_0)) ==> ia32_Xor_src
static ir_node *transform_f1663204(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Eor32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3) ==> ia32_Xor_src_index
static ir_node *transform_f1663205(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Eor(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 1 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 1)) {
		var3 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Xor(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))) ==> ia32_Xor_src_index
static ir_node *transform_f1663206(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Eor32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3) ==> ia32_Xor_src_index
static ir_node *transform_f1663207(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Eor(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 1 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 1)) {
		var3 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Xor(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))) ==> ia32_Xor_src_index
static ir_node *transform_f1663208(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Eor32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2) ==> ia32_Xor_src
static ir_node *transform_f1663209(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Eor(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 1 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(node, 1)) {
		var2 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Xor(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_1,VAR_0)) ==> ia32_Xor_src
static ir_node *transform_f1663210(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Eor32(VAR_1,VAR_0) ==> ia32_Xor
static ir_node *transform_f1663211(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Eor(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(node, 0)) {
		var1 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Xor(dbgi, block, noreg_GP, noreg_GP, nomem, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Eor32(VAR_0,VAR_1) ==> ia32_Xor
static ir_node *transform_f1663212(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Eor(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(node, 1)) {
		var1 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Xor(dbgi, block, noreg_GP, noreg_GP, nomem, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Or32(VAR_0,IMM_1) ==> ia32_Or
static ir_node *transform_f1663213(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Or(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (x86_match_immediate(&tmp_imm, get_irn_n(node, 1), 'g')) {
		if (var1 == NULL) {
			var1 = ia32_create_Immediate_full(get_irn_irg(block), &tmp_imm);
		} else if (!x86_imm32_equal(&get_ia32_immediate_attr(var1)->imm, &tmp_imm)) {
			return NULL;
		}
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Or(dbgi, block, noreg_GP, noreg_GP, nomem, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Or32(IMM_1,VAR_0) ==> ia32_Or
static ir_node *transform_f1663214(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Or(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (x86_match_immediate(&tmp_imm, get_irn_n(node, 0), 'g')) {
		if (var1 == NULL) {
			var1 = ia32_create_Immediate_full(get_irn_irg(block), &tmp_imm);
		} else if (!x86_imm32_equal(&get_ia32_immediate_attr(var1)->imm, &tmp_imm)) {
			return NULL;
		}
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Or(dbgi, block, noreg_GP, noreg_GP, nomem, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Or32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3) ==> ia32_Or_src_index
static ir_node *transform_f1663215(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Or(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 1 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 1)) {
		var3 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Or(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))) ==> ia32_Or_src_index
static ir_node *transform_f1663216(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Or32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3) ==> ia32_Or_src_index
static ir_node *transform_f1663217(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Or(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 1 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 1)) {
		var3 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Or(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))) ==> ia32_Or_src_index
static ir_node *transform_f1663218(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Or32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2) ==> ia32_Or_src
static ir_node *transform_f1663219(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Or(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 1 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(node, 1)) {
		var2 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Or(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_1,VAR_0)) ==> ia32_Or_src
static ir_node *transform_f1663220(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Or32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1)))) ==> ia32_Or_src_index
static ir_node *transform_f1663221(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Or(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 0)) {
		var3 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 1)) && get_Proj_num(get_irn_n(node, 1)) == 1 && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 1))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Or(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))) ==> ia32_Or_src_index
static ir_node *transform_f1663222(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Or32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0)))) ==> ia32_Or_src_index
static ir_node *transform_f1663223(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Or(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 0)) {
		var3 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 1)) && get_Proj_num(get_irn_n(node, 1)) == 1 && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 1))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Or(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))) ==> ia32_Or_src_index
static ir_node *transform_f1663224(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Or32(VAR_2,PROJ_1(load32(VAR_1,VAR_0))) ==> ia32_Or_src
static ir_node *transform_f1663225(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Or(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(node, 0)) {
		var2 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 1)) && get_Proj_num(get_irn_n(node, 1)) == 1 && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 1))) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Or(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_1,VAR_0)) ==> ia32_Or_src
static ir_node *transform_f1663226(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Or32(VAR_1,VAR_0) ==> ia32_Or
static ir_node *transform_f1663227(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Or(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(node, 0)) {
		var1 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Or(dbgi, block, noreg_GP, noreg_GP, nomem, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Or32(VAR_0,VAR_1) ==> ia32_Or
static ir_node *transform_f1663228(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Or(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(node, 1)) {
		var1 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Or(dbgi, block, noreg_GP, noreg_GP, nomem, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Shl32(VAR_0,IMM_1) ==> ia32_Shl
static ir_node *transform_f1663229(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Shl(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (x86_match_immediate(&tmp_imm, get_irn_n(node, 1), 'g')) {
		if (var1 == NULL) {
			var1 = ia32_create_Immediate_full(get_irn_irg(block), &tmp_imm);
		} else if (!x86_imm32_equal(&get_ia32_immediate_attr(var1)->imm, &tmp_imm)) {
			return NULL;
		}
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Shl(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Shl32(VAR_0,VAR_1) ==> ia32_Shl
static ir_node *transform_f1663230(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Shl(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(node, 1)) {
		var1 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Shl(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Shr32(VAR_0,IMM_1) ==> ia32_Shr
static ir_node *transform_f1663231(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Shr(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (x86_match_immediate(&tmp_imm, get_irn_n(node, 1), 'g')) {
		if (var1 == NULL) {
			var1 = ia32_create_Immediate_full(get_irn_irg(block), &tmp_imm);
		} else if (!x86_imm32_equal(&get_ia32_immediate_attr(var1)->imm, &tmp_imm)) {
			return NULL;
		}
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Shr(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Shr32(VAR_0,VAR_1) ==> ia32_Shr
static ir_node *transform_f1663232(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Shr(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(node, 1)) {
		var1 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Shr(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Shrs32(VAR_0,IMM_1) ==> ia32_Sar
static ir_node *transform_f1663233(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Shrs(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (x86_match_immediate(&tmp_imm, get_irn_n(node, 1), 'g')) {
		if (var1 == NULL) {
			var1 = ia32_create_Immediate_full(get_irn_irg(block), &tmp_imm);
		} else if (!x86_imm32_equal(&get_ia32_immediate_attr(var1)->imm, &tmp_imm)) {
			return NULL;
		}
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Sar(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Shrs32(VAR_0,VAR_1) ==> ia32_Sar
static ir_node *transform_f1663234(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Shrs(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(node, 1)) {
		var1 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Sar(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Sub32(VAR_0,IMM_1) ==> ia32_Sub
static ir_node *transform_f1663235(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Sub(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (x86_match_immediate(&tmp_imm, get_irn_n(node, 1), 'g')) {
		if (var1 == NULL) {
			var1 = ia32_create_Immediate_full(get_irn_irg(block), &tmp_imm);
		} else if (!x86_imm32_equal(&get_ia32_immediate_attr(var1)->imm, &tmp_imm)) {
			return NULL;
		}
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Sub(dbgi, block, noreg_GP, noreg_GP, nomem, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Sub32(VAR_0,const32[1]) ==> ia32_Dec
static ir_node *transform_f1663236(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;

	if (!(is_Sub(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(node, 1)) && tarval_cmp(get_Const_tarval(get_irn_n(node, 1)), new_tarval_from_long(1, get_irn_mode(get_irn_n(node, 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Dec(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Sub32(VAR_0,const32[4294967295]) ==> ia32_Inc
static ir_node *transform_f1663237(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;

	if (!(is_Sub(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(node, 1)) && tarval_cmp(get_Const_tarval(get_irn_n(node, 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(node, 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Inc(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Sub32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0)))) ==> ia32_Sub_src_index
static ir_node *transform_f1663238(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Sub(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 0)) {
		var3 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 1)) && get_Proj_num(get_irn_n(node, 1)) == 1 && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 1))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Sub(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))) ==> ia32_Sub_src_index
static ir_node *transform_f1663239(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Sub32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1)))) ==> ia32_Sub_src_index
static ir_node *transform_f1663240(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Sub(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 0)) {
		var3 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 1)) && get_Proj_num(get_irn_n(node, 1)) == 1 && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 1))) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Sub(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))) ==> ia32_Sub_src_index
static ir_node *transform_f1663241(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Sub32(VAR_2,PROJ_1(load32(VAR_1,VAR_0))) ==> ia32_Sub_src
static ir_node *transform_f1663242(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Sub(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(node, 0)) {
		var2 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 1)) && get_Proj_num(get_irn_n(node, 1)) == 1 && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 1))) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 1)), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Sub(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), noreg_GP); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_op_type(new_node, ia32_AddrModeS); set_irn_mode(new_node, mode_T);
		new_node = be_new_Proj(new_node, 0);
	return new_node;
}
// PROJ_0(load32(VAR_1,VAR_0)) ==> ia32_Sub_src
static ir_node *transform_f1663243(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// Sub32(VAR_0,VAR_1) ==> ia32_Sub
static ir_node *transform_f1663244(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Sub(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(node, 1)) {
		var1 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Sub(dbgi, block, noreg_GP, noreg_GP, nomem, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_commutative(new_node); set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Not32(Minus32(VAR_0)) ==> ia32_Dec
static ir_node *transform_f1663245(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;

	if (!(is_Not(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Minus(get_irn_n(node, 0)) && (get_irn_mode(get_irn_n(node, 0)) == mode_Is || get_irn_mode(get_irn_n(node, 0)) == mode_Iu || get_irn_mode(get_irn_n(node, 0)) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Dec(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Not32(VAR_0) ==> ia32_Not
static ir_node *transform_f1663246(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;

	if (!(is_Not(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 0)) {
		var0 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Not(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// Minus32(Not32(VAR_0)) ==> ia32_Inc
static ir_node *transform_f1663247(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;

	if (!(is_Minus(node) && (get_irn_mode(node) == mode_Is || get_irn_mode(node) == mode_Iu || get_irn_mode(node) == mode_P))) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(node, 0)) && (get_irn_mode(get_irn_n(node, 0)) == mode_Is || get_irn_mode(get_irn_n(node, 0)) == mode_Iu || get_irn_mode(get_irn_n(node, 0)) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Inc(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_REG; set_ia32_ls_mode(new_node, get_irn_mode(node)); set_ia32_am_support(new_node, ia32_am_none);
	return new_node;
}
// PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))) ==> ia32_Load_index
static ir_node *transform_f1663248(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(node)) && (get_Load_mode(get_Proj_pred(node)) == mode_Is || get_Load_mode(get_Proj_pred(node)) == mode_Iu || get_Load_mode(get_Proj_pred(node)) == mode_P))) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(node), 0)) {
		var2 = get_irn_n(get_Proj_pred(node), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))) ==> ia32_Load_index
static ir_node *transform_f1663249(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// load32(VAR_2,Add32(VAR_1,VAR_0)) ==> ia32_Load_index
static ir_node *transform_f1663250(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Load(node) && (get_Load_mode(node) == mode_Is || get_Load_mode(node) == mode_Iu || get_Load_mode(node) == mode_P))) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(node, 0)) {
		var2 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Load(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_Load_mode(node));
	return new_node;
}
// PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))) ==> ia32_Load_index
static ir_node *transform_f1663251(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(node)) && (get_Load_mode(get_Proj_pred(node)) == mode_Is || get_Load_mode(get_Proj_pred(node)) == mode_Iu || get_Load_mode(get_Proj_pred(node)) == mode_P))) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(node), 0)) {
		var2 = get_irn_n(get_Proj_pred(node), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))) ==> ia32_Load_index
static ir_node *transform_f1663252(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// load32(VAR_2,Add32(VAR_0,VAR_1)) ==> ia32_Load_index
static ir_node *transform_f1663253(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Load(node) && (get_Load_mode(node) == mode_Is || get_Load_mode(node) == mode_Iu || get_Load_mode(node) == mode_P))) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(node, 0)) {
		var2 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Load(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_Load_mode(node));
	return new_node;
}
// PROJ_1(load32(VAR_1,VAR_0)) ==> ia32_Load
static ir_node *transform_f1663254(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(node)) && (get_Load_mode(get_Proj_pred(node)) == mode_Is || get_Load_mode(get_Proj_pred(node)) == mode_Iu || get_Load_mode(get_Proj_pred(node)) == mode_P))) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(node), 0)) {
		var1 = get_irn_n(get_Proj_pred(node), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(load32(VAR_1,VAR_0)) ==> ia32_Load
static ir_node *transform_f1663255(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	// ProjM hack taken from old instruction selector
	if (!is_Proj(node)) {
		return NULL;
	}
	ir_node *pred = get_Proj_pred(node);
	unsigned pn   = get_Proj_num(node);
	if (is_Load(pred) && pn == pn_Load_M) {
		if (get_irn_n_edges(pred) > 1) {
			/* this is needed, because sometimes we have loops that are only
			   reachable through the ProjM */
			be_enqueue_operands(node);
			/* do it in 2 steps, to silence firm verifier */
			ir_node *const res = new_r_Proj(pred, mode_M, pn_Load_M);
			set_Proj_num(res, pn_ia32_M);
			return res;
		} else {
			ir_node *new_pred = be_transform_node(pred);
			return be_new_Proj(new_pred, pn_ia32_Load_M);
		}
	} else {
		return NULL;
	}
}
// load32(VAR_1,VAR_0) ==> ia32_Load
static ir_node *transform_f1663256(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Load(node) && (get_Load_mode(node) == mode_Is || get_Load_mode(node) == mode_Iu || get_Load_mode(node) == mode_P))) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(node, 0)) {
		var1 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Load(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_Load_mode(node));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Add32(const32[4294967295],PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1)))))) ==> ia32_DecMem_index
static ir_node *transform_f1663257(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Add32(const32[4294967295],PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))))) ==> ia32_DecMem_index
static ir_node *transform_f1663258(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_DecMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Add32(const32[4294967295],PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0)))))) ==> ia32_DecMem_index
static ir_node *transform_f1663259(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Add32(const32[4294967295],PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))))) ==> ia32_DecMem_index
static ir_node *transform_f1663260(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_DecMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Add32(const32[4294967295],PROJ_1(load32(VAR_1,VAR_0))))) ==> ia32_DecMem
static ir_node *transform_f1663261(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Add32(const32[4294967295],PROJ_1(load32(VAR_1,VAR_0)))) ==> ia32_DecMem
static ir_node *transform_f1663262(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_DecMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Add32(const32[1],PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0)))))) ==> ia32_IncMem_index
static ir_node *transform_f1663263(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Add32(const32[1],PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))))) ==> ia32_IncMem_index
static ir_node *transform_f1663264(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 0)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_IncMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Add32(const32[1],PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1)))))) ==> ia32_IncMem_index
static ir_node *transform_f1663265(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Add32(const32[1],PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))))) ==> ia32_IncMem_index
static ir_node *transform_f1663266(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 0)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_IncMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Add32(const32[1],PROJ_1(load32(VAR_1,VAR_0))))) ==> ia32_IncMem
static ir_node *transform_f1663267(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Add32(const32[1],PROJ_1(load32(VAR_1,VAR_0)))) ==> ia32_IncMem
static ir_node *transform_f1663268(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 0)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_IncMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Add32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0)))))) ==> ia32_AddMem_index
static ir_node *transform_f1663269(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Add32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))))) ==> ia32_AddMem_index
static ir_node *transform_f1663270(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 0)) {
		var3 = get_irn_n(get_irn_n(node, 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_AddMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Add32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1)))))) ==> ia32_AddMem_index
static ir_node *transform_f1663271(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Add32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))))) ==> ia32_AddMem_index
static ir_node *transform_f1663272(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 0)) {
		var3 = get_irn_n(get_irn_n(node, 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_AddMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Add32(VAR_2,PROJ_1(load32(VAR_1,VAR_0))))) ==> ia32_AddMem
static ir_node *transform_f1663273(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) {
		var2 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Add32(VAR_2,PROJ_1(load32(VAR_1,VAR_0)))) ==> ia32_AddMem
static ir_node *transform_f1663274(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(node, 2), 0)) {
		var2 = get_irn_n(get_irn_n(node, 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_AddMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Add32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),const32[1]))) ==> ia32_IncMem_index
static ir_node *transform_f1663275(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Add32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),const32[1])) ==> ia32_IncMem_index
static ir_node *transform_f1663276(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 1)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(node, 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_IncMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Add32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),const32[1]))) ==> ia32_IncMem_index
static ir_node *transform_f1663277(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Add32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),const32[1])) ==> ia32_IncMem_index
static ir_node *transform_f1663278(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 1)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(node, 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_IncMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Add32(PROJ_1(load32(VAR_1,VAR_0)),const32[1]))) ==> ia32_IncMem
static ir_node *transform_f1663279(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Add32(PROJ_1(load32(VAR_1,VAR_0)),const32[1])) ==> ia32_IncMem
static ir_node *transform_f1663280(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 1)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(node, 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_IncMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Add32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),const32[4294967295]))) ==> ia32_DecMem_index
static ir_node *transform_f1663281(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Add32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),const32[4294967295])) ==> ia32_DecMem_index
static ir_node *transform_f1663282(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_DecMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Add32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),const32[4294967295]))) ==> ia32_DecMem_index
static ir_node *transform_f1663283(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Add32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),const32[4294967295])) ==> ia32_DecMem_index
static ir_node *transform_f1663284(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_DecMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Add32(PROJ_1(load32(VAR_1,VAR_0)),const32[4294967295]))) ==> ia32_DecMem
static ir_node *transform_f1663285(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Add32(PROJ_1(load32(VAR_1,VAR_0)),const32[4294967295])) ==> ia32_DecMem
static ir_node *transform_f1663286(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_DecMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Add32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3))) ==> ia32_AddMem_index
static ir_node *transform_f1663287(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Add32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3)) ==> ia32_AddMem_index
static ir_node *transform_f1663288(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 1)) {
		var3 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_AddMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Add32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3))) ==> ia32_AddMem_index
static ir_node *transform_f1663289(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Add32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3)) ==> ia32_AddMem_index
static ir_node *transform_f1663290(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 1)) {
		var3 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_AddMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Add32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2))) ==> ia32_AddMem
static ir_node *transform_f1663291(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var2 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Add32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2)) ==> ia32_AddMem
static ir_node *transform_f1663292(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(node, 2), 1)) {
		var2 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_AddMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),And32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0)))))) ==> ia32_AndMem_index
static ir_node *transform_f1663293(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_And(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),And32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))))) ==> ia32_AndMem_index
static ir_node *transform_f1663294(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_And(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 0)) {
		var3 = get_irn_n(get_irn_n(node, 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_AndMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),And32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1)))))) ==> ia32_AndMem_index
static ir_node *transform_f1663295(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_And(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),And32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))))) ==> ia32_AndMem_index
static ir_node *transform_f1663296(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_And(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 0)) {
		var3 = get_irn_n(get_irn_n(node, 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_AndMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,And32(VAR_2,PROJ_1(load32(VAR_1,VAR_0))))) ==> ia32_AndMem
static ir_node *transform_f1663297(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_And(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) {
		var2 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,And32(VAR_2,PROJ_1(load32(VAR_1,VAR_0)))) ==> ia32_AndMem
static ir_node *transform_f1663298(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_And(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(node, 2), 0)) {
		var2 = get_irn_n(get_irn_n(node, 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_AndMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),And32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3))) ==> ia32_AndMem_index
static ir_node *transform_f1663299(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_And(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),And32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3)) ==> ia32_AndMem_index
static ir_node *transform_f1663300(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_And(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 1)) {
		var3 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_AndMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),And32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3))) ==> ia32_AndMem_index
static ir_node *transform_f1663301(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_And(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),And32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3)) ==> ia32_AndMem_index
static ir_node *transform_f1663302(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_And(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 1)) {
		var3 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_AndMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,And32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2))) ==> ia32_AndMem
static ir_node *transform_f1663303(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_And(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var2 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,And32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2)) ==> ia32_AndMem
static ir_node *transform_f1663304(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_And(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(node, 2), 1)) {
		var2 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_AndMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Eor32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1)))))) ==> ia32_XorMem_index
static ir_node *transform_f1663305(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Eor32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))))) ==> ia32_XorMem_index
static ir_node *transform_f1663306(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 0)) {
		var3 = get_irn_n(get_irn_n(node, 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_XorMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Eor32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0)))))) ==> ia32_XorMem_index
static ir_node *transform_f1663307(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Eor32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))))) ==> ia32_XorMem_index
static ir_node *transform_f1663308(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 0)) {
		var3 = get_irn_n(get_irn_n(node, 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_XorMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Eor32(VAR_2,PROJ_1(load32(VAR_1,VAR_0))))) ==> ia32_XorMem
static ir_node *transform_f1663309(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) {
		var2 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Eor32(VAR_2,PROJ_1(load32(VAR_1,VAR_0)))) ==> ia32_XorMem
static ir_node *transform_f1663310(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(node, 2), 0)) {
		var2 = get_irn_n(get_irn_n(node, 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_XorMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Eor32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3))) ==> ia32_XorMem_index
static ir_node *transform_f1663311(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Eor32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3)) ==> ia32_XorMem_index
static ir_node *transform_f1663312(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 1)) {
		var3 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_XorMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Eor32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3))) ==> ia32_XorMem_index
static ir_node *transform_f1663313(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Eor32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3)) ==> ia32_XorMem_index
static ir_node *transform_f1663314(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 1)) {
		var3 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_XorMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Eor32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2))) ==> ia32_XorMem
static ir_node *transform_f1663315(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var2 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Eor32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2)) ==> ia32_XorMem
static ir_node *transform_f1663316(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(node, 2), 1)) {
		var2 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_XorMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Or32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1)))))) ==> ia32_OrMem_index
static ir_node *transform_f1663317(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Or(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Or32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))))) ==> ia32_OrMem_index
static ir_node *transform_f1663318(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Or(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 0)) {
		var3 = get_irn_n(get_irn_n(node, 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_OrMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Or32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0)))))) ==> ia32_OrMem_index
static ir_node *transform_f1663319(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Or(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Or32(VAR_3,PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))))) ==> ia32_OrMem_index
static ir_node *transform_f1663320(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Or(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 0)) {
		var3 = get_irn_n(get_irn_n(node, 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_OrMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Or32(VAR_2,PROJ_1(load32(VAR_1,VAR_0))))) ==> ia32_OrMem
static ir_node *transform_f1663321(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Or(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) {
		var2 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Or32(VAR_2,PROJ_1(load32(VAR_1,VAR_0)))) ==> ia32_OrMem
static ir_node *transform_f1663322(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Or(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(node, 2), 0)) {
		var2 = get_irn_n(get_irn_n(node, 2), 0);
	} else {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 1)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 1)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 1)), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_OrMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Or32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3))) ==> ia32_OrMem_index
static ir_node *transform_f1663323(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Or(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Or32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3)) ==> ia32_OrMem_index
static ir_node *transform_f1663324(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Or(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 1)) {
		var3 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_OrMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Or32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3))) ==> ia32_OrMem_index
static ir_node *transform_f1663325(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Or(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Or32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3)) ==> ia32_OrMem_index
static ir_node *transform_f1663326(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Or(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 1)) {
		var3 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_OrMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Or32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2))) ==> ia32_OrMem
static ir_node *transform_f1663327(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Or(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var2 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Or32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2)) ==> ia32_OrMem
static ir_node *transform_f1663328(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Or(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(node, 2), 1)) {
		var2 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_OrMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Shl32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3))) ==> ia32_ShlMem_index
static ir_node *transform_f1663329(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Shl(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Shl32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3)) ==> ia32_ShlMem_index
static ir_node *transform_f1663330(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Shl(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 1)) {
		var3 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_ShlMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Shl32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3))) ==> ia32_ShlMem_index
static ir_node *transform_f1663331(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Shl(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Shl32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3)) ==> ia32_ShlMem_index
static ir_node *transform_f1663332(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Shl(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 1)) {
		var3 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_ShlMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Shl32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2))) ==> ia32_ShlMem
static ir_node *transform_f1663333(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Shl(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var2 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Shl32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2)) ==> ia32_ShlMem
static ir_node *transform_f1663334(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Shl(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(node, 2), 1)) {
		var2 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_ShlMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Shr32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3))) ==> ia32_ShrMem_index
static ir_node *transform_f1663335(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Shr(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Shr32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3)) ==> ia32_ShrMem_index
static ir_node *transform_f1663336(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Shr(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 1)) {
		var3 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_ShrMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Shr32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3))) ==> ia32_ShrMem_index
static ir_node *transform_f1663337(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Shr(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Shr32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3)) ==> ia32_ShrMem_index
static ir_node *transform_f1663338(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Shr(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 1)) {
		var3 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_ShrMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Shr32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2))) ==> ia32_ShrMem
static ir_node *transform_f1663339(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Shr(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var2 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Shr32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2)) ==> ia32_ShrMem
static ir_node *transform_f1663340(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Shr(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(node, 2), 1)) {
		var2 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_ShrMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Shrs32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3))) ==> ia32_SarMem_index
static ir_node *transform_f1663341(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Shrs(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Shrs32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3)) ==> ia32_SarMem_index
static ir_node *transform_f1663342(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Shrs(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 1)) {
		var3 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_SarMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Shrs32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3))) ==> ia32_SarMem_index
static ir_node *transform_f1663343(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Shrs(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Shrs32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3)) ==> ia32_SarMem_index
static ir_node *transform_f1663344(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Shrs(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 1)) {
		var3 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_SarMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Shrs32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2))) ==> ia32_SarMem
static ir_node *transform_f1663345(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Shrs(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var2 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Shrs32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2)) ==> ia32_SarMem
static ir_node *transform_f1663346(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Shrs(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(node, 2), 1)) {
		var2 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_SarMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Sub32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),const32[1]))) ==> ia32_DecMem_index
static ir_node *transform_f1663347(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Sub32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),const32[1])) ==> ia32_DecMem_index
static ir_node *transform_f1663348(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 1)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(node, 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_DecMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Sub32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),const32[1]))) ==> ia32_DecMem_index
static ir_node *transform_f1663349(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Sub32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),const32[1])) ==> ia32_DecMem_index
static ir_node *transform_f1663350(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 1)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(node, 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_DecMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Sub32(PROJ_1(load32(VAR_1,VAR_0)),const32[1]))) ==> ia32_DecMem
static ir_node *transform_f1663351(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Sub32(PROJ_1(load32(VAR_1,VAR_0)),const32[1])) ==> ia32_DecMem
static ir_node *transform_f1663352(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 1)), new_tarval_from_long(1, get_irn_mode(get_irn_n(get_irn_n(node, 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_DecMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Sub32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),const32[4294967295]))) ==> ia32_IncMem_index
static ir_node *transform_f1663353(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Sub32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),const32[4294967295])) ==> ia32_IncMem_index
static ir_node *transform_f1663354(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_IncMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Sub32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),const32[4294967295]))) ==> ia32_IncMem_index
static ir_node *transform_f1663355(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Sub32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),const32[4294967295])) ==> ia32_IncMem_index
static ir_node *transform_f1663356(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_IncMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Sub32(PROJ_1(load32(VAR_1,VAR_0)),const32[4294967295]))) ==> ia32_IncMem
static ir_node *transform_f1663357(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Sub32(PROJ_1(load32(VAR_1,VAR_0)),const32[4294967295])) ==> ia32_IncMem
static ir_node *transform_f1663358(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 2), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 2), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 2), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_IncMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Sub32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3))) ==> ia32_SubMem_index
static ir_node *transform_f1663359(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Sub32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))),VAR_3)) ==> ia32_SubMem_index
static ir_node *transform_f1663360(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 1)) {
		var3 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_SubMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Sub32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3))) ==> ia32_SubMem_index
static ir_node *transform_f1663361(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var3 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Sub32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))),VAR_3)) ==> ia32_SubMem_index
static ir_node *transform_f1663362(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_irn_n(node, 2), 1)) {
		var3 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_SubMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Sub32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2))) ==> ia32_SubMem
static ir_node *transform_f1663363(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1)) {
		var2 = get_irn_n(get_irn_n(get_Proj_pred(node), 2), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Sub32(PROJ_1(load32(VAR_1,VAR_0)),VAR_2)) ==> ia32_SubMem
static ir_node *transform_f1663364(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_irn_n(node, 2), 1)) {
		var2 = get_irn_n(get_irn_n(node, 2), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_SubMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Not32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1)))))) ==> ia32_NotMem_index
static ir_node *transform_f1663365(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Not32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))))) ==> ia32_NotMem_index
static ir_node *transform_f1663366(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_NotMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Not32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0)))))) ==> ia32_NotMem_index
static ir_node *transform_f1663367(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Not32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))))) ==> ia32_NotMem_index
static ir_node *transform_f1663368(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_NotMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Not32(PROJ_1(load32(VAR_1,VAR_0))))) ==> ia32_NotMem
static ir_node *transform_f1663369(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Not32(PROJ_1(load32(VAR_1,VAR_0)))) ==> ia32_NotMem
static ir_node *transform_f1663370(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(node, 2), 0)) && get_Proj_num(get_irn_n(get_irn_n(node, 2), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(node, 2), 0)), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_NotMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Minus32(Not32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))))))) ==> ia32_IncMem_index
static ir_node *transform_f1663371(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Minus(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Minus32(Not32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0)))))) ==> ia32_IncMem_index
static ir_node *transform_f1663372(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Minus(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 2), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_IncMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Minus32(Not32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))))))) ==> ia32_IncMem_index
static ir_node *transform_f1663373(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Minus(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Minus32(Not32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1)))))) ==> ia32_IncMem_index
static ir_node *transform_f1663374(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Minus(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 2), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_IncMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Minus32(Not32(PROJ_1(load32(VAR_1,VAR_0)))))) ==> ia32_IncMem
static ir_node *transform_f1663375(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Minus(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Minus32(Not32(PROJ_1(load32(VAR_1,VAR_0))))) ==> ia32_IncMem
static ir_node *transform_f1663376(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Minus(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 2), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_IncMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Not32(Minus32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0))))))) ==> ia32_DecMem_index
static ir_node *transform_f1663377(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Minus(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_1,VAR_0))),Add32(VAR_1,VAR_0),Not32(Minus32(PROJ_1(load32(VAR_2,Add32(VAR_1,VAR_0)))))) ==> ia32_DecMem_index
static ir_node *transform_f1663378(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Minus(get_irn_n(get_irn_n(node, 2), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_DecMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Not32(Minus32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1))))))) ==> ia32_DecMem_index
static ir_node *transform_f1663379(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Minus(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_2,Add32(VAR_0,VAR_1))),Add32(VAR_0,VAR_1),Not32(Minus32(PROJ_1(load32(VAR_2,Add32(VAR_0,VAR_1)))))) ==> ia32_DecMem_index
static ir_node *transform_f1663380(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Minus(get_irn_n(get_irn_n(node, 2), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == 2)) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 0)) {
		var2 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_DecMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Not32(Minus32(PROJ_1(load32(VAR_1,VAR_0)))))) ==> ia32_DecMem
static ir_node *transform_f1663381(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_Proj_pred(node), 0)) && get_Proj_num(get_irn_n(get_Proj_pred(node), 0)) == 0 && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_Proj_pred(node), 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_Proj_pred(node), 2)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 2)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 2)) == 1)) {
		return NULL;
	}
	if (!(is_Minus(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 2), 0), 0)), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 2);
}
// store32(PROJ_0(load32(VAR_1,VAR_0)),VAR_0,Not32(Minus32(PROJ_1(load32(VAR_1,VAR_0))))) ==> ia32_DecMem
static ir_node *transform_f1663382(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(node, 0)) && get_Proj_num(get_irn_n(node, 0)) == 0 && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(node, 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(node, 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(node, 0)), 1);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(node, 2)) && (get_irn_mode(get_irn_n(node, 2)) == mode_Is || get_irn_mode(get_irn_n(node, 2)) == mode_Iu || get_irn_mode(get_irn_n(node, 2)) == mode_P) && get_irn_n_edges(get_irn_n(node, 2)) == 1)) {
		return NULL;
	}
	if (!(is_Minus(get_irn_n(get_irn_n(node, 2), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 2), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 2), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Proj(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) && get_Proj_num(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) == 1 && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Load(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) && (get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_Is || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_Iu || get_Load_mode(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == mode_P) && get_irn_n_edges(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0))) == 2)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 0)) {
		var1 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1)) {
		var0 = get_irn_n(get_Proj_pred(get_irn_n(get_irn_n(get_irn_n(node, 2), 0), 0)), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_DecMem(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(VAR_2,Add32(VAR_0,VAR_1),VAR_3)) ==> ia32_Store_index
static ir_node *transform_f1663383(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(node), 0)) {
		var2 = get_irn_n(get_Proj_pred(node), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_Proj_pred(node), 2)) {
		var3 = get_irn_n(get_Proj_pred(node), 2);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// store32(VAR_2,Add32(VAR_0,VAR_1),VAR_3) ==> ia32_Store_index
static ir_node *transform_f1663384(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(node, 0)) {
		var2 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 0)) {
		var0 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 1)) {
		var1 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 2)) {
		var3 = get_irn_n(node, 2);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Store(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(VAR_2,Add32(VAR_1,VAR_0),VAR_3)) ==> ia32_Store_index
static ir_node *transform_f1663385(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(node), 0)) {
		var2 = get_irn_n(get_Proj_pred(node), 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_Proj_pred(node), 1)) && (get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Is || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_Proj_pred(node), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(get_Proj_pred(node), 2)) {
		var3 = get_irn_n(get_Proj_pred(node), 2);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// store32(VAR_2,Add32(VAR_1,VAR_0),VAR_3) ==> ia32_Store_index
static ir_node *transform_f1663386(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;
	ir_node *var3 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(node, 0)) {
		var2 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(node, 1)) && (get_irn_mode(get_irn_n(node, 1)) == mode_Is || get_irn_mode(get_irn_n(node, 1)) == mode_Iu || get_irn_mode(get_irn_n(node, 1)) == mode_P) && get_irn_n_edges(get_irn_n(node, 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 1), 0)) {
		var1 = get_irn_n(get_irn_n(node, 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 1), 1)) {
		var0 = get_irn_n(get_irn_n(node, 1), 1);
	} else {
		return NULL;
	}
	if (var3 == NULL || var3 == get_irn_n(node, 2)) {
		var3 = get_irn_n(node, 2);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Store(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2), is_ia32_Immediate(var3) ? var3 : be_transform_node(var3)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE_INDEX; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(store32(VAR_1,VAR_0,VAR_2)) ==> ia32_Store
static ir_node *transform_f1663387(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Store(get_Proj_pred(node)) && (get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Is || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_Iu || get_irn_mode(get_Store_value(get_Proj_pred(node))) == mode_P))) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_Proj_pred(node), 0)) {
		var1 = get_irn_n(get_Proj_pred(node), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_Proj_pred(node), 1)) {
		var0 = get_irn_n(get_Proj_pred(node), 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(get_Proj_pred(node), 2)) {
		var2 = get_irn_n(get_Proj_pred(node), 2);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// store32(VAR_1,VAR_0,VAR_2) ==> ia32_Store
static ir_node *transform_f1663388(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;
	ir_node *var2 = NULL;

	if (!(is_Store(node) && (get_irn_mode(get_Store_value(node)) == mode_Is || get_irn_mode(get_Store_value(node)) == mode_Iu || get_irn_mode(get_Store_value(node)) == mode_P))) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(node, 0)) {
		var1 = get_irn_n(node, 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(node, 1)) {
		var0 = get_irn_n(node, 1);
	} else {
		return NULL;
	}
	if (var2 == NULL || var2 == get_irn_n(node, 2)) {
		var2 = get_irn_n(node, 2);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	new_node = new_bd_ia32_Store(dbgi, block, is_ia32_Immediate(var0) ? var0 : be_transform_node(var0), noreg_GP, is_ia32_Immediate(var1) ? var1 : be_transform_node(var1), is_ia32_Immediate(var2) ? var2 : be_transform_node(var2)); get_ia32_attr(new_node)->addr.variant = X86_ADDR_BASE; set_ia32_ls_mode(new_node, get_irn_mode(get_Store_value(node)));
	return new_node;
}
// PROJ_0(cond(cmp32_s[4](const32[0],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663389(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](const32[0],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663390(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](const32[0],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663391(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](const32[0],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663392(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](const32[0],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663393(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](const32[0],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663394(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](const32[0],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663395(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](const32[0],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663396(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](const32[0],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663397(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](const32[0],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663398(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](const32[0],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663399(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](const32[0],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663400(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_0,VAR_1),const32[4294967295]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663401(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_0,VAR_1),const32[4294967295]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663402(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_0,VAR_1),const32[4294967295])) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663403(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_0,VAR_1),const32[4294967295]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663404(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_0,VAR_1),const32[4294967295]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663405(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_0,VAR_1),const32[4294967295])) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663406(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_0,VAR_1),const32[4294967295]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663407(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_0,VAR_1),const32[4294967295]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663408(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_0,VAR_1),const32[4294967295])) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663409(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_0,VAR_1),const32[4294967295]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663410(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_0,VAR_1),const32[4294967295]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663411(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_0,VAR_1),const32[4294967295])) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663412(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663413(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663414(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663415(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663416(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663417(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663418(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663419(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663420(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663421(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663422(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663423(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663424(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663425(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663426(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663427(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663428(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663429(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663430(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663431(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663432(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663433(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663434(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663435(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663436(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663437(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663438(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663439(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663440(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663441(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663442(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663443(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663444(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663445(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663446(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663447(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663448(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663449(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663450(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663451(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663452(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663453(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663454(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663455(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663456(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663457(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663458(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663459(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663460(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663461(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663462(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663463(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663464(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663465(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663466(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663467(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663468(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663469(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663470(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663471(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663472(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663473(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663474(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663475(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663476(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663477(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663478(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663479(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663480(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663481(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663482(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663483(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663484(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663485(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663486(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663487(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663488(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663489(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663490(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663491(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663492(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663493(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663494(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663495(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663496(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663497(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663498(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663499(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663500(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663501(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663502(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663503(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663504(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663505(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663506(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663507(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663508(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663509(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663510(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663511(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663512(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663513(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663514(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](VAR_1,VAR_0))) ==> compound-ia_jcc[13](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663515(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](VAR_1,VAR_0))) ==> compound-ia_jcc[13](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663516(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](VAR_1,VAR_0)) ==> compound-ia_jcc[13](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663517(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f37_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f38_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f39_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f37_node, f38_node, false); set_ia32_ls_mode(f39_node, mode_Is);
ir_node *f40_node = new_bd_ia32_Jcc(dbgi, block, f39_node, 13);
new_node = f40_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](VAR_1,VAR_0))) ==> compound-ia_jcc[12](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663518(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](VAR_1,VAR_0))) ==> compound-ia_jcc[12](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663519(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](VAR_1,VAR_0)) ==> compound-ia_jcc[12](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663520(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f33_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f34_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f35_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f33_node, f34_node, false); set_ia32_ls_mode(f35_node, mode_Is);
ir_node *f36_node = new_bd_ia32_Jcc(dbgi, block, f35_node, 12);
new_node = f36_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[4](VAR_0,VAR_1))) ==> compound-ia_jcc[15](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663521(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[4](VAR_0,VAR_1))) ==> compound-ia_jcc[15](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663522(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](VAR_0,VAR_1)) ==> compound-ia_jcc[15](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663523(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f45_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f46_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f47_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f45_node, f46_node, false); set_ia32_ls_mode(f47_node, mode_Is);
ir_node *f48_node = new_bd_ia32_Jcc(dbgi, block, f47_node, 15);
new_node = f48_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[4](VAR_0,VAR_1))) ==> compound-ia_jcc[14](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663524(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[4](VAR_0,VAR_1))) ==> compound-ia_jcc[14](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663525(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[4](VAR_0,VAR_1)) ==> compound-ia_jcc[14](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663526(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f41_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f42_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f43_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f41_node, f42_node, false); set_ia32_ls_mode(f43_node, mode_Is);
ir_node *f44_node = new_bd_ia32_Jcc(dbgi, block, f43_node, 14);
new_node = f44_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),const32[0]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663527(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),const32[0]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663528(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),const32[0])) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663529(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),const32[0]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663530(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),const32[0]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663531(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),const32[0])) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663532(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),const32[0]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663533(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),const32[0]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663534(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),const32[0])) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663535(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),const32[0]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663536(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),const32[0]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663537(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),const32[0])) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663538(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](const32[4294967295],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663539(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](const32[4294967295],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663540(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](const32[4294967295],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663541(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](const32[4294967295],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663542(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](const32[4294967295],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663543(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](const32[4294967295],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663544(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](const32[4294967295],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663545(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](const32[4294967295],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663546(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](const32[4294967295],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663547(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](const32[4294967295],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663548(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](const32[4294967295],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663549(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](const32[4294967295],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663550(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663551(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663552(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663553(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663554(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663555(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663556(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663557(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663558(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663559(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663560(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663561(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663562(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663563(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663564(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663565(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663566(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663567(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663568(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663569(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663570(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663571(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663572(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663573(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663574(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663575(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663576(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663577(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663578(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663579(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663580(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663581(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663582(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663583(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663584(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663585(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663586(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663587(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663588(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663589(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663590(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663591(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663592(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663593(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663594(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663595(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663596(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663597(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663598(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663599(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663600(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663601(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663602(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663603(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663604(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663605(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663606(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663607(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663608(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663609(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663610(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663611(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663612(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663613(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663614(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663615(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663616(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663617(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663618(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663619(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663620(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663621(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663622(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663623(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663624(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663625(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663626(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663627(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663628(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663629(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663630(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663631(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663632(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663633(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663634(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663635(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663636(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663637(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663638(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663639(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663640(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663641(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663642(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663643(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663644(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663645(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663646(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663647(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663648(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663649(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663650(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663651(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663652(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](VAR_1,VAR_0))) ==> compound-ia_jcc[14](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663653(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](VAR_1,VAR_0))) ==> compound-ia_jcc[14](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663654(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](VAR_1,VAR_0)) ==> compound-ia_jcc[14](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663655(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f41_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f42_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f43_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f41_node, f42_node, false); set_ia32_ls_mode(f43_node, mode_Is);
ir_node *f44_node = new_bd_ia32_Jcc(dbgi, block, f43_node, 14);
new_node = f44_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[2](VAR_0,VAR_1))) ==> compound-ia_jcc[13](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663656(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[2](VAR_0,VAR_1))) ==> compound-ia_jcc[13](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663657(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](VAR_0,VAR_1)) ==> compound-ia_jcc[13](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663658(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f37_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f38_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f39_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f37_node, f38_node, false); set_ia32_ls_mode(f39_node, mode_Is);
ir_node *f40_node = new_bd_ia32_Jcc(dbgi, block, f39_node, 13);
new_node = f40_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](VAR_0,VAR_1))) ==> compound-ia_jcc[12](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663659(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](VAR_0,VAR_1))) ==> compound-ia_jcc[12](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663660(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](VAR_0,VAR_1)) ==> compound-ia_jcc[12](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663661(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f33_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f34_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f35_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f33_node, f34_node, false); set_ia32_ls_mode(f35_node, mode_Is);
ir_node *f36_node = new_bd_ia32_Jcc(dbgi, block, f35_node, 12);
new_node = f36_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[2](VAR_1,VAR_0))) ==> compound-ia_jcc[15](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663662(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[2](VAR_1,VAR_0))) ==> compound-ia_jcc[15](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663663(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[2](VAR_1,VAR_0)) ==> compound-ia_jcc[15](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663664(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f45_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f46_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f47_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f45_node, f46_node, false); set_ia32_ls_mode(f47_node, mode_Is);
ir_node *f48_node = new_bd_ia32_Jcc(dbgi, block, f47_node, 15);
new_node = f48_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](const32[0],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663665(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](const32[0],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663666(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](const32[0],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663667(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](const32[0],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663668(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](const32[0],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663669(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](const32[0],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663670(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](const32[0],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663671(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](const32[0],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663672(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](const32[0],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663673(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](const32[0],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663674(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](const32[0],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663675(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](const32[0],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663676(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_0,VAR_1),const32[4294967295]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663677(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_0,VAR_1),const32[4294967295]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663678(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_0,VAR_1),const32[4294967295])) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663679(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_0,VAR_1),const32[4294967295]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663680(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_0,VAR_1),const32[4294967295]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663681(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_0,VAR_1),const32[4294967295])) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663682(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_0,VAR_1),const32[4294967295]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663683(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_0,VAR_1),const32[4294967295]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663684(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_0,VAR_1),const32[4294967295])) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663685(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_0,VAR_1),const32[4294967295]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663686(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_0,VAR_1),const32[4294967295]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663687(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_0,VAR_1),const32[4294967295])) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663688(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663689(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663690(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663691(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663692(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663693(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663694(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663695(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663696(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663697(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663698(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663699(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663700(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663701(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663702(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663703(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663704(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663705(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663706(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663707(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663708(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663709(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663710(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663711(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663712(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663713(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663714(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Eor32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663715(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663716(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663717(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Eor32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663718(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663719(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663720(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663721(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663722(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663723(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663724(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663725(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663726(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663727(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663728(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663729(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663730(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663731(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663732(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663733(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663734(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663735(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663736(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663737(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663738(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663739(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663740(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663741(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663742(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663743(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663744(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663745(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663746(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663747(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663748(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663749(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663750(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663751(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663752(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663753(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663754(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663755(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663756(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663757(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663758(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663759(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663760(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663761(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663762(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663763(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663764(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663765(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663766(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663767(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663768(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663769(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663770(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663771(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663772(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663773(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663774(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663775(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663776(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663777(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663778(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663779(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663780(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663781(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663782(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663783(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_1,VAR_1),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663784(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663785(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663786(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663787(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663788(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663789(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](Sub32(VAR_0,VAR_0),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663790(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](VAR_1,VAR_0))) ==> compound-ia_jcc[12](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663791(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](VAR_1,VAR_0))) ==> compound-ia_jcc[12](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663792(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](VAR_1,VAR_0)) ==> compound-ia_jcc[12](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663793(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f33_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f34_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f35_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f33_node, f34_node, false); set_ia32_ls_mode(f35_node, mode_Is);
ir_node *f36_node = new_bd_ia32_Jcc(dbgi, block, f35_node, 12);
new_node = f36_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](VAR_1,VAR_0))) ==> compound-ia_jcc[13](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663794(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](VAR_1,VAR_0))) ==> compound-ia_jcc[13](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663795(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](VAR_1,VAR_0)) ==> compound-ia_jcc[13](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663796(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f37_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f38_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f39_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f37_node, f38_node, false); set_ia32_ls_mode(f39_node, mode_Is);
ir_node *f40_node = new_bd_ia32_Jcc(dbgi, block, f39_node, 13);
new_node = f40_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[3](VAR_0,VAR_1))) ==> compound-ia_jcc[14](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663797(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[3](VAR_0,VAR_1))) ==> compound-ia_jcc[14](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663798(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](VAR_0,VAR_1)) ==> compound-ia_jcc[14](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663799(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f41_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f42_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f43_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f41_node, f42_node, false); set_ia32_ls_mode(f43_node, mode_Is);
ir_node *f44_node = new_bd_ia32_Jcc(dbgi, block, f43_node, 14);
new_node = f44_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[3](VAR_0,VAR_1))) ==> compound-ia_jcc[15](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663800(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[3](VAR_0,VAR_1))) ==> compound-ia_jcc[15](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663801(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[3](VAR_0,VAR_1)) ==> compound-ia_jcc[15](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663802(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f45_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f46_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f47_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f45_node, f46_node, false); set_ia32_ls_mode(f47_node, mode_Is);
ir_node *f48_node = new_bd_ia32_Jcc(dbgi, block, f47_node, 15);
new_node = f48_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),const32[0]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663803(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),const32[0]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663804(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),const32[0])) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663805(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),const32[0]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663806(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),const32[0]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663807(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),const32[0])) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663808(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),const32[0]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663809(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),const32[0]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663810(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),const32[0])) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663811(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),const32[0]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663812(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),const32[0]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663813(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),const32[0])) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663814(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(0, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](const32[4294967295],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663815(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](const32[4294967295],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663816(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](const32[4294967295],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663817(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](const32[4294967295],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663818(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](const32[4294967295],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663819(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](const32[4294967295],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663820(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](const32[4294967295],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663821(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](const32[4294967295],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663822(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](const32[4294967295],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663823(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](const32[4294967295],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663824(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](const32[4294967295],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663825(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](const32[4294967295],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663826(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(4294967295, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663827(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663828(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663829(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663830(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663831(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663832(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663833(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663834(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663835(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663836(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663837(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663838(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663839(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663840(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663841(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663842(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663843(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663844(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663845(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663846(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663847(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663848(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663849(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_1,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663850(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663851(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663852(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663853(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663854(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663855(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Eor32(VAR_0,VAR_0))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663856(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Eor(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663857(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663858(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663859(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663860(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663861(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663862(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663863(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663864(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663865(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663866(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663867(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663868(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663869(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663870(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663871(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663872(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663873(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663874(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663875(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663876(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663877(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663878(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663879(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663880(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663881(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663882(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663883(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663884(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663885(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663886(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663887(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663888(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663889(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663890(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663891(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663892(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663893(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663894(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663895(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663896(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663897(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663898(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663899(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663900(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663901(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663902(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663903(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663904(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663905(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663906(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663907(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663908(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663909(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663910(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663911(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663912(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663913(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663914(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663915(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663916(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663917(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663918(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_1,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663919(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663920(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663921(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663922(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663923(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663924(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663925(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663926(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663927(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_0))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663928(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](VAR_0,VAR_1))) ==> compound-ia_jcc[13](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663929(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](VAR_0,VAR_1))) ==> compound-ia_jcc[13](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663930(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](VAR_0,VAR_1)) ==> compound-ia_jcc[13](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663931(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f37_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f38_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f39_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f37_node, f38_node, false); set_ia32_ls_mode(f39_node, mode_Is);
ir_node *f40_node = new_bd_ia32_Jcc(dbgi, block, f39_node, 13);
new_node = f40_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](VAR_0,VAR_1))) ==> compound-ia_jcc[12](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663932(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](VAR_0,VAR_1))) ==> compound-ia_jcc[12](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663933(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](VAR_0,VAR_1)) ==> compound-ia_jcc[12](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663934(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f33_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f34_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f35_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f33_node, f34_node, false); set_ia32_ls_mode(f35_node, mode_Is);
ir_node *f36_node = new_bd_ia32_Jcc(dbgi, block, f35_node, 12);
new_node = f36_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[5](VAR_1,VAR_0))) ==> compound-ia_jcc[14](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663935(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[5](VAR_1,VAR_0))) ==> compound-ia_jcc[14](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663936(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](VAR_1,VAR_0)) ==> compound-ia_jcc[14](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663937(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f41_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f42_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f43_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f41_node, f42_node, false); set_ia32_ls_mode(f43_node, mode_Is);
ir_node *f44_node = new_bd_ia32_Jcc(dbgi, block, f43_node, 14);
new_node = f44_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[5](VAR_1,VAR_0))) ==> compound-ia_jcc[15](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663938(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[5](VAR_1,VAR_0))) ==> compound-ia_jcc[15](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663939(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[5](VAR_1,VAR_0)) ==> compound-ia_jcc[15](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663940(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f45_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f46_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f47_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f45_node, f46_node, false); set_ia32_ls_mode(f47_node, mode_Is);
ir_node *f48_node = new_bd_ia32_Jcc(dbgi, block, f47_node, 15);
new_node = f48_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[6](VAR_0,VAR_1))) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663941(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 6 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[6](VAR_0,VAR_1))) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663942(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 6 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[6](VAR_0,VAR_1)) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663943(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 6 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f13_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f14_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f15_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f13_node, f14_node, false); set_ia32_ls_mode(f15_node, mode_Is);
ir_node *f16_node = new_bd_ia32_Jcc(dbgi, block, f15_node, 5);
new_node = f16_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[6](VAR_1,VAR_0))) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663944(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 6 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[6](VAR_1,VAR_0))) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663945(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 6 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[6](VAR_1,VAR_0)) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663946(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 6 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f13_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f14_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f15_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f13_node, f14_node, false); set_ia32_ls_mode(f15_node, mode_Is);
ir_node *f16_node = new_bd_ia32_Jcc(dbgi, block, f15_node, 5);
new_node = f16_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[6](VAR_1,VAR_0))) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663947(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 6 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[6](VAR_1,VAR_0))) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663948(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 6 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[6](VAR_1,VAR_0)) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663949(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 6 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f9_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f10_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f11_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f9_node, f10_node, false); set_ia32_ls_mode(f11_node, mode_Is);
ir_node *f12_node = new_bd_ia32_Jcc(dbgi, block, f11_node, 4);
new_node = f12_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[6](VAR_0,VAR_1))) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663950(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 6 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[6](VAR_0,VAR_1))) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663951(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 6 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[6](VAR_0,VAR_1)) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663952(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 6 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f9_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f10_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f11_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f9_node, f10_node, false); set_ia32_ls_mode(f11_node, mode_Is);
ir_node *f12_node = new_bd_ia32_Jcc(dbgi, block, f11_node, 4);
new_node = f12_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[1](VAR_0,VAR_1))) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663953(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 1 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[1](VAR_0,VAR_1))) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663954(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 1 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[1](VAR_0,VAR_1)) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663955(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 1 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f13_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f14_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f15_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f13_node, f14_node, false); set_ia32_ls_mode(f15_node, mode_Is);
ir_node *f16_node = new_bd_ia32_Jcc(dbgi, block, f15_node, 5);
new_node = f16_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[1](VAR_0,VAR_1))) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663956(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 1 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[1](VAR_0,VAR_1))) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663957(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 1 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[1](VAR_0,VAR_1)) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663958(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 1 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f9_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f10_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f11_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f9_node, f10_node, false); set_ia32_ls_mode(f11_node, mode_Is);
ir_node *f12_node = new_bd_ia32_Jcc(dbgi, block, f11_node, 4);
new_node = f12_node;

	return new_node;
}
// PROJ_0(cond(cmp32_s[1](VAR_1,VAR_0))) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663959(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 1 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_s[1](VAR_1,VAR_0))) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663960(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 1 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[1](VAR_1,VAR_0)) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663961(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 1 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f9_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f10_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f11_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f9_node, f10_node, false); set_ia32_ls_mode(f11_node, mode_Is);
ir_node *f12_node = new_bd_ia32_Jcc(dbgi, block, f11_node, 4);
new_node = f12_node;

	return new_node;
}
// PROJ_1(cond(cmp32_s[1](VAR_1,VAR_0))) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663962(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 1 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_s[1](VAR_1,VAR_0))) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663963(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 1 && get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Is && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_s[1](VAR_1,VAR_0)) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663964(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 1 && get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Is && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f13_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f14_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f15_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f13_node, f14_node, false); set_ia32_ls_mode(f15_node, mode_Is);
ir_node *f16_node = new_bd_ia32_Jcc(dbgi, block, f15_node, 5);
new_node = f16_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[1](VAR_1,VAR_0))) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663965(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 1 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[1](VAR_1,VAR_0))) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663966(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 1 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[1](VAR_1,VAR_0)) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663967(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 1 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f13_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f14_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f15_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f13_node, f14_node, false); set_ia32_ls_mode(f15_node, mode_Is);
ir_node *f16_node = new_bd_ia32_Jcc(dbgi, block, f15_node, 5);
new_node = f16_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[1](VAR_0,VAR_1))) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663968(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 1 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[1](VAR_0,VAR_1))) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663969(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 1 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[1](VAR_0,VAR_1)) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663970(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 1 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f13_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f14_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f15_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f13_node, f14_node, false); set_ia32_ls_mode(f15_node, mode_Is);
ir_node *f16_node = new_bd_ia32_Jcc(dbgi, block, f15_node, 5);
new_node = f16_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[1](VAR_1,VAR_0))) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663971(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 1 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[1](VAR_1,VAR_0))) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663972(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 1 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[1](VAR_1,VAR_0)) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663973(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 1 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f9_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f10_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f11_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f9_node, f10_node, false); set_ia32_ls_mode(f11_node, mode_Is);
ir_node *f12_node = new_bd_ia32_Jcc(dbgi, block, f11_node, 4);
new_node = f12_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[1](VAR_0,VAR_1))) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663974(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 1 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[1](VAR_0,VAR_1))) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663975(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 1 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[1](VAR_0,VAR_1)) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663976(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 1 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f9_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f10_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f11_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f9_node, f10_node, false); set_ia32_ls_mode(f11_node, mode_Is);
ir_node *f12_node = new_bd_ia32_Jcc(dbgi, block, f11_node, 4);
new_node = f12_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[6](VAR_0,VAR_1))) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663977(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 6 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[6](VAR_0,VAR_1))) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663978(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 6 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[6](VAR_0,VAR_1)) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663979(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 6 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f13_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f14_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f15_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f13_node, f14_node, false); set_ia32_ls_mode(f15_node, mode_Is);
ir_node *f16_node = new_bd_ia32_Jcc(dbgi, block, f15_node, 5);
new_node = f16_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[6](VAR_1,VAR_0))) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663980(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 6 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[6](VAR_1,VAR_0))) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663981(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 6 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[6](VAR_1,VAR_0)) ==> compound-ia_jcc[5](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663982(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 6 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f13_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f14_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f15_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f13_node, f14_node, false); set_ia32_ls_mode(f15_node, mode_Is);
ir_node *f16_node = new_bd_ia32_Jcc(dbgi, block, f15_node, 5);
new_node = f16_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[6](VAR_1,VAR_0))) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663983(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 6 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[6](VAR_1,VAR_0))) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663984(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 6 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[6](VAR_1,VAR_0)) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663985(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 6 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f9_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f10_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f11_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f9_node, f10_node, false); set_ia32_ls_mode(f11_node, mode_Is);
ir_node *f12_node = new_bd_ia32_Jcc(dbgi, block, f11_node, 4);
new_node = f12_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[6](VAR_0,VAR_1))) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663986(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 6 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[6](VAR_0,VAR_1))) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663987(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 6 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[6](VAR_0,VAR_1)) ==> compound-ia_jcc[4](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663988(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 6 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f9_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f10_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f11_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f9_node, f10_node, false); set_ia32_ls_mode(f11_node, mode_Is);
ir_node *f12_node = new_bd_ia32_Jcc(dbgi, block, f11_node, 4);
new_node = f12_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[4](Sub32(VAR_0,VAR_1),Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663989(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[4](Sub32(VAR_0,VAR_1),Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663990(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](Sub32(VAR_0,VAR_1),Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663991(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[4](Sub32(VAR_0,VAR_1),Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663992(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[4](Sub32(VAR_0,VAR_1),Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663993(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](Sub32(VAR_0,VAR_1),Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663994(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[4](const32[2147483648],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663995(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[4](const32[2147483648],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663996(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](const32[2147483648],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663997(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[4](const32[2147483648],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663998(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[4](const32[2147483648],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1663999(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](const32[2147483648],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664000(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[4](const32[2147483648],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664001(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[4](const32[2147483648],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664002(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](const32[2147483648],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664003(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[4](const32[2147483648],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664004(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[4](const32[2147483648],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664005(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](const32[2147483648],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664006(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[4](Sub32(VAR_0,VAR_1),const32[2147483647]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664007(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[4](Sub32(VAR_0,VAR_1),const32[2147483647]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664008(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](Sub32(VAR_0,VAR_1),const32[2147483647])) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664009(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[4](Sub32(VAR_0,VAR_1),const32[2147483647]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664010(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[4](Sub32(VAR_0,VAR_1),const32[2147483647]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664011(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](Sub32(VAR_0,VAR_1),const32[2147483647])) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664012(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[4](Sub32(VAR_0,VAR_1),const32[2147483647]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664013(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[4](Sub32(VAR_0,VAR_1),const32[2147483647]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664014(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](Sub32(VAR_0,VAR_1),const32[2147483647])) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664015(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[4](Sub32(VAR_0,VAR_1),const32[2147483647]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664016(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[4](Sub32(VAR_0,VAR_1),const32[2147483647]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664017(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](Sub32(VAR_0,VAR_1),const32[2147483647])) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664018(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[4](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664019(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[4](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664020(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664021(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[4](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664022(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[4](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664023(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664024(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[4](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664025(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[4](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664026(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664027(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[4](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664028(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[4](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664029(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664030(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[4](VAR_1,VAR_0))) ==> compound-ia_jcc[2](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664031(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[4](VAR_1,VAR_0))) ==> compound-ia_jcc[2](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664032(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](VAR_1,VAR_0)) ==> compound-ia_jcc[2](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664033(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f1_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f2_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f3_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f1_node, f2_node, false); set_ia32_ls_mode(f3_node, mode_Is);
ir_node *f4_node = new_bd_ia32_Jcc(dbgi, block, f3_node, 2);
new_node = f4_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[4](VAR_0,VAR_1))) ==> compound-ia_jcc[6](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664034(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[4](VAR_0,VAR_1))) ==> compound-ia_jcc[6](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664035(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](VAR_0,VAR_1)) ==> compound-ia_jcc[6](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664036(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f17_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f18_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f19_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f17_node, f18_node, false); set_ia32_ls_mode(f19_node, mode_Is);
ir_node *f20_node = new_bd_ia32_Jcc(dbgi, block, f19_node, 6);
new_node = f20_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[4](VAR_1,VAR_0))) ==> compound-ia_jcc[3](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664037(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[4](VAR_1,VAR_0))) ==> compound-ia_jcc[3](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664038(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](VAR_1,VAR_0)) ==> compound-ia_jcc[3](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664039(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f5_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f6_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f7_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f5_node, f6_node, false); set_ia32_ls_mode(f7_node, mode_Is);
ir_node *f8_node = new_bd_ia32_Jcc(dbgi, block, f7_node, 3);
new_node = f8_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[4](VAR_0,VAR_1))) ==> compound-ia_jcc[7](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664040(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[4](VAR_0,VAR_1))) ==> compound-ia_jcc[7](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664041(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[4](VAR_0,VAR_1)) ==> compound-ia_jcc[7](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664042(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 4 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f21_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f22_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f23_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f21_node, f22_node, false); set_ia32_ls_mode(f23_node, mode_Is);
ir_node *f24_node = new_bd_ia32_Jcc(dbgi, block, f23_node, 7);
new_node = f24_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[2](Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664043(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[2](Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664044(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664045(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[2](Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664046(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[2](Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664047(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664048(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[2](const32[2147483647],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664049(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[2](const32[2147483647],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664050(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](const32[2147483647],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664051(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[2](const32[2147483647],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664052(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[2](const32[2147483647],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664053(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](const32[2147483647],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664054(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[2](const32[2147483647],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664055(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[2](const32[2147483647],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664056(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](const32[2147483647],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664057(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[2](const32[2147483647],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664058(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[2](const32[2147483647],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664059(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](const32[2147483647],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664060(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[2](Sub32(VAR_0,VAR_1),const32[2147483648]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664061(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[2](Sub32(VAR_0,VAR_1),const32[2147483648]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664062(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](Sub32(VAR_0,VAR_1),const32[2147483648])) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664063(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[2](Sub32(VAR_0,VAR_1),const32[2147483648]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664064(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[2](Sub32(VAR_0,VAR_1),const32[2147483648]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664065(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](Sub32(VAR_0,VAR_1),const32[2147483648])) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664066(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[2](Sub32(VAR_0,VAR_1),const32[2147483648]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664067(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[2](Sub32(VAR_0,VAR_1),const32[2147483648]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664068(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](Sub32(VAR_0,VAR_1),const32[2147483648])) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664069(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[2](Sub32(VAR_0,VAR_1),const32[2147483648]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664070(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[2](Sub32(VAR_0,VAR_1),const32[2147483648]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664071(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](Sub32(VAR_0,VAR_1),const32[2147483648])) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664072(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[2](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664073(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[2](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664074(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664075(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[2](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664076(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[2](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664077(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664078(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[2](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664079(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[2](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664080(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664081(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[2](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664082(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[2](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664083(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664084(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[2](VAR_1,VAR_0))) ==> compound-ia_jcc[6](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664085(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[2](VAR_1,VAR_0))) ==> compound-ia_jcc[6](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664086(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](VAR_1,VAR_0)) ==> compound-ia_jcc[6](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664087(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f17_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f18_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f19_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f17_node, f18_node, false); set_ia32_ls_mode(f19_node, mode_Is);
ir_node *f20_node = new_bd_ia32_Jcc(dbgi, block, f19_node, 6);
new_node = f20_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[2](VAR_1,VAR_0))) ==> compound-ia_jcc[7](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664088(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[2](VAR_1,VAR_0))) ==> compound-ia_jcc[7](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664089(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](VAR_1,VAR_0)) ==> compound-ia_jcc[7](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664090(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f21_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f22_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f23_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f21_node, f22_node, false); set_ia32_ls_mode(f23_node, mode_Is);
ir_node *f24_node = new_bd_ia32_Jcc(dbgi, block, f23_node, 7);
new_node = f24_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[2](VAR_0,VAR_1))) ==> compound-ia_jcc[3](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664091(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[2](VAR_0,VAR_1))) ==> compound-ia_jcc[3](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664092(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](VAR_0,VAR_1)) ==> compound-ia_jcc[3](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664093(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f5_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f6_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f7_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f5_node, f6_node, false); set_ia32_ls_mode(f7_node, mode_Is);
ir_node *f8_node = new_bd_ia32_Jcc(dbgi, block, f7_node, 3);
new_node = f8_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[2](VAR_0,VAR_1))) ==> compound-ia_jcc[2](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664094(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[2](VAR_0,VAR_1))) ==> compound-ia_jcc[2](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664095(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[2](VAR_0,VAR_1)) ==> compound-ia_jcc[2](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664096(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 2 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f1_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f2_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f3_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f1_node, f2_node, false); set_ia32_ls_mode(f3_node, mode_Is);
ir_node *f4_node = new_bd_ia32_Jcc(dbgi, block, f3_node, 2);
new_node = f4_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[3](Sub32(VAR_0,VAR_1),Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664097(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[3](Sub32(VAR_0,VAR_1),Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664098(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](Sub32(VAR_0,VAR_1),Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664099(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[3](Sub32(VAR_0,VAR_1),Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664100(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[3](Sub32(VAR_0,VAR_1),Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664101(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](Sub32(VAR_0,VAR_1),Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664102(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[3](const32[2147483648],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664103(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[3](const32[2147483648],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664104(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](const32[2147483648],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664105(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[3](const32[2147483648],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664106(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[3](const32[2147483648],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664107(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](const32[2147483648],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664108(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[3](const32[2147483648],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664109(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[3](const32[2147483648],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664110(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](const32[2147483648],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664111(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[3](const32[2147483648],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664112(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[3](const32[2147483648],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664113(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](const32[2147483648],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664114(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[3](Sub32(VAR_0,VAR_1),const32[2147483647]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664115(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[3](Sub32(VAR_0,VAR_1),const32[2147483647]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664116(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](Sub32(VAR_0,VAR_1),const32[2147483647])) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664117(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[3](Sub32(VAR_0,VAR_1),const32[2147483647]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664118(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[3](Sub32(VAR_0,VAR_1),const32[2147483647]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664119(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](Sub32(VAR_0,VAR_1),const32[2147483647])) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664120(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[3](Sub32(VAR_0,VAR_1),const32[2147483647]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664121(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[3](Sub32(VAR_0,VAR_1),const32[2147483647]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664122(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](Sub32(VAR_0,VAR_1),const32[2147483647])) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664123(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[3](Sub32(VAR_0,VAR_1),const32[2147483647]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664124(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[3](Sub32(VAR_0,VAR_1),const32[2147483647]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664125(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](Sub32(VAR_0,VAR_1),const32[2147483647])) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664126(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[3](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664127(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[3](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664128(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664129(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[3](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664130(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[3](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664131(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664132(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[3](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664133(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[3](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664134(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664135(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[3](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664136(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[3](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664137(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664138(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[3](VAR_0,VAR_1))) ==> compound-ia_jcc[6](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664139(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[3](VAR_0,VAR_1))) ==> compound-ia_jcc[6](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664140(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](VAR_0,VAR_1)) ==> compound-ia_jcc[6](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664141(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f17_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f18_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f19_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f17_node, f18_node, false); set_ia32_ls_mode(f19_node, mode_Is);
ir_node *f20_node = new_bd_ia32_Jcc(dbgi, block, f19_node, 6);
new_node = f20_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[3](VAR_1,VAR_0))) ==> compound-ia_jcc[3](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664142(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[3](VAR_1,VAR_0))) ==> compound-ia_jcc[3](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664143(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](VAR_1,VAR_0)) ==> compound-ia_jcc[3](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664144(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f5_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f6_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f7_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f5_node, f6_node, false); set_ia32_ls_mode(f7_node, mode_Is);
ir_node *f8_node = new_bd_ia32_Jcc(dbgi, block, f7_node, 3);
new_node = f8_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[3](VAR_1,VAR_0))) ==> compound-ia_jcc[2](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664145(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[3](VAR_1,VAR_0))) ==> compound-ia_jcc[2](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664146(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](VAR_1,VAR_0)) ==> compound-ia_jcc[2](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664147(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f1_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f2_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f3_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f1_node, f2_node, false); set_ia32_ls_mode(f3_node, mode_Is);
ir_node *f4_node = new_bd_ia32_Jcc(dbgi, block, f3_node, 2);
new_node = f4_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[3](VAR_0,VAR_1))) ==> compound-ia_jcc[7](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664148(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[3](VAR_0,VAR_1))) ==> compound-ia_jcc[7](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664149(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[3](VAR_0,VAR_1)) ==> compound-ia_jcc[7](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664150(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 3 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f21_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f22_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f23_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f21_node, f22_node, false); set_ia32_ls_mode(f23_node, mode_Is);
ir_node *f24_node = new_bd_ia32_Jcc(dbgi, block, f23_node, 7);
new_node = f24_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[5](Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664151(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[5](Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664152(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664153(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[5](Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664154(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[5](Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664155(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](Add32(Sub32(VAR_0,VAR_1),Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664156(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Add(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 3)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[5](Sub32(VAR_0,VAR_1),const32[2147483648]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664157(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[5](Sub32(VAR_0,VAR_1),const32[2147483648]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664158(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](Sub32(VAR_0,VAR_1),const32[2147483648])) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664159(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[5](Sub32(VAR_0,VAR_1),const32[2147483648]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664160(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[5](Sub32(VAR_0,VAR_1),const32[2147483648]))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664161(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](Sub32(VAR_0,VAR_1),const32[2147483648])) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664162(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[5](Sub32(VAR_0,VAR_1),const32[2147483648]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664163(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[5](Sub32(VAR_0,VAR_1),const32[2147483648]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664164(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](Sub32(VAR_0,VAR_1),const32[2147483648])) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664165(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[5](Sub32(VAR_0,VAR_1),const32[2147483648]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664166(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[5](Sub32(VAR_0,VAR_1),const32[2147483648]))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664167(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](Sub32(VAR_0,VAR_1),const32[2147483648])) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664168(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 1)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 1)), new_tarval_from_long(2147483648, get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[5](const32[2147483647],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664169(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[5](const32[2147483647],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664170(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](const32[2147483647],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664171(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[5](const32[2147483647],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664172(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[5](const32[2147483647],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664173(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](const32[2147483647],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664174(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[5](const32[2147483647],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664175(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[5](const32[2147483647],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664176(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](const32[2147483647],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664177(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[5](const32[2147483647],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664178(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[5](const32[2147483647],Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664179(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](const32[2147483647],Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664180(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Const(get_irn_n(get_irn_n(node, 0), 0)) && tarval_cmp(get_Const_tarval(get_irn_n(get_irn_n(node, 0), 0)), new_tarval_from_long(2147483647, get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)))) == ir_relation_equal && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[5](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664181(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[5](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664182(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664183(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[5](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664184(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[5](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1))))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664185(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](Sub32(VAR_0,VAR_1),Not32(Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664186(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[5](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664187(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[5](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664188(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[9](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664189(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f29_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f30_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f31_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f29_node, f30_node, false); set_ia32_ls_mode(f31_node, mode_Is);
ir_node *f32_node = new_bd_ia32_Jcc(dbgi, block, f31_node, 9);
new_node = f32_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[5](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664190(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[5](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1)))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664191(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](Not32(Sub32(VAR_0,VAR_1)),Sub32(VAR_0,VAR_1))) ==> compound-ia_jcc[8](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664192(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (!(is_Not(get_irn_n(get_irn_n(node, 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 0)) == 1)) {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) && (get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(get_irn_n(node, 0), 0), 0), 1);
	} else {
		return NULL;
	}
	if (!(is_Sub(get_irn_n(get_irn_n(node, 0), 1)) && (get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Is || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_Iu || get_irn_mode(get_irn_n(get_irn_n(node, 0), 1)) == mode_P) && get_irn_n_edges(get_irn_n(get_irn_n(node, 0), 1)) == 2)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0)) {
		var0 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1)) {
		var1 = get_irn_n(get_irn_n(get_irn_n(node, 0), 1), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f25_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f26_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f27_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f25_node, f26_node, false); set_ia32_ls_mode(f27_node, mode_Is);
ir_node *f28_node = new_bd_ia32_Jcc(dbgi, block, f27_node, 8);
new_node = f28_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[5](VAR_1,VAR_0))) ==> compound-ia_jcc[7](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664193(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[5](VAR_1,VAR_0))) ==> compound-ia_jcc[7](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664194(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](VAR_1,VAR_0)) ==> compound-ia_jcc[7](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664195(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f21_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f22_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f23_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f21_node, f22_node, false); set_ia32_ls_mode(f23_node, mode_Is);
ir_node *f24_node = new_bd_ia32_Jcc(dbgi, block, f23_node, 7);
new_node = f24_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[5](VAR_1,VAR_0))) ==> compound-ia_jcc[6](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664196(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[5](VAR_1,VAR_0))) ==> compound-ia_jcc[6](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664197(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](VAR_1,VAR_0)) ==> compound-ia_jcc[6](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664198(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 0)) {
		var1 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 1)) {
		var0 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f17_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f18_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f19_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f17_node, f18_node, false); set_ia32_ls_mode(f19_node, mode_Is);
ir_node *f20_node = new_bd_ia32_Jcc(dbgi, block, f19_node, 6);
new_node = f20_node;

	return new_node;
}
// PROJ_1(cond(cmp32_u[5](VAR_0,VAR_1))) ==> compound-ia_jcc[2](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664199(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_0(cond(cmp32_u[5](VAR_0,VAR_1))) ==> compound-ia_jcc[2](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664200(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](VAR_0,VAR_1)) ==> compound-ia_jcc[2](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664201(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f1_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f2_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f3_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f1_node, f2_node, false); set_ia32_ls_mode(f3_node, mode_Is);
ir_node *f4_node = new_bd_ia32_Jcc(dbgi, block, f3_node, 2);
new_node = f4_node;

	return new_node;
}
// PROJ_0(cond(cmp32_u[5](VAR_0,VAR_1))) ==> compound-ia_jcc[3](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664202(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 0)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 0);
}
// PROJ_1(cond(cmp32_u[5](VAR_0,VAR_1))) ==> compound-ia_jcc[3](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664203(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Proj(node) && get_Proj_num(node) == 1)) {
		return NULL;
	}
	if (!(is_Cond(get_Proj_pred(node)))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(get_Proj_pred(node), 0)) && get_Cmp_relation(get_irn_n(get_Proj_pred(node), 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(get_Proj_pred(node), 0))) == mode_P) && get_irn_n_edges(get_irn_n(get_Proj_pred(node), 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0)) {
		var0 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1)) {
		var1 = get_irn_n(get_irn_n(get_Proj_pred(node), 0), 1);
	} else {
		return NULL;
	}
	ir_node *pred = be_transform_node(get_Proj_pred(node));
	return be_new_Proj(pred, 1);
}
// cond(cmp32_u[5](VAR_0,VAR_1)) ==> compound-ia_jcc[3](ia32_Cmp(VAR_0,VAR_1))
static ir_node *transform_f1664204(ir_node *node, ir_node *block, dbg_info *dbgi)
{
	(void)block;
	(void)dbgi;
	x86_imm32_t tmp_imm;
	(void)tmp_imm;
	ir_node *var0 = NULL;
	ir_node *var1 = NULL;

	if (!(is_Cond(node))) {
		return NULL;
	}
	if (!(is_Cmp(get_irn_n(node, 0)) && get_Cmp_relation(get_irn_n(node, 0)) == 5 && (get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_Iu || get_irn_mode(get_Cmp_left(get_irn_n(node, 0))) == mode_P) && get_irn_n_edges(get_irn_n(node, 0)) == 1)) {
		return NULL;
	}
	if (var0 == NULL || var0 == get_irn_n(get_irn_n(node, 0), 0)) {
		var0 = get_irn_n(get_irn_n(node, 0), 0);
	} else {
		return NULL;
	}
	if (var1 == NULL || var1 == get_irn_n(get_irn_n(node, 0), 1)) {
		var1 = get_irn_n(get_irn_n(node, 0), 1);
	} else {
		return NULL;
	}
	ir_node *new_node = NULL;
	ir_node *f5_node = is_ia32_Immediate(var0) ? var0 : be_transform_node(var0);
ir_node *f6_node = is_ia32_Immediate(var1) ? var1 : be_transform_node(var1);
ir_node *f7_node = new_bd_ia32_Cmp(dbgi, block, noreg_GP, noreg_GP, nomem, f5_node, f6_node, false); set_ia32_ls_mode(f7_node, mode_Is);
ir_node *f8_node = new_bd_ia32_Jcc(dbgi, block, f7_node, 3);
new_node = f8_node;

	return new_node;
}
ir_node *ia32_autotransform(ir_node *node, int *rule)
{
	dbg_info *dbgi     = get_irn_dbg_info(node);
	ir_node  *block    = be_transform_node(get_nodes_block(node));
	ir_node  *new_node = NULL;
	*rule = -1;

	new_node = transform_f1663153(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663154(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663155(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663156(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663157(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663158(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663159(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663160(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663161(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663162(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663163(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663164(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663165(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663166(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663167(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663168(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663169(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663170(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663171(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663172(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663173(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663174(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663175(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663176(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663177(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663178(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663179(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663180(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663181(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663182(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663183(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663184(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663185(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663186(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663187(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663188(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663189(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663190(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663191(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663192(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663193(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663194(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663195(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663196(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663197(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663198(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663199(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663200(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663201(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663202(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663203(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663204(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663205(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663206(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663207(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663208(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663209(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663210(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663211(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663212(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663213(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663214(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663215(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663216(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663217(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663218(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663219(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663220(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663221(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663222(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663223(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663224(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663225(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663226(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663227(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663228(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663229(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663230(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663231(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663232(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663233(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663234(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663235(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663236(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663237(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663238(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663239(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663240(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663241(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663242(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663243(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663244(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663245(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663246(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663247(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663248(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663249(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663250(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663251(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663252(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663253(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663254(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663255(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663256(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663257(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663258(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663259(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663260(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663261(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663262(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663263(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663264(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663265(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663266(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663267(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663268(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663269(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663270(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663271(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663272(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663273(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663274(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663275(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663276(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663277(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663278(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663279(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663280(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663281(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663282(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663283(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663284(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663285(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663286(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663287(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663288(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663289(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663290(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663291(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663292(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663293(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663294(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663295(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663296(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663297(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663298(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663299(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663300(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663301(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663302(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663303(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663304(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663305(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663306(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663307(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663308(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663309(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663310(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663311(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663312(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663313(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663314(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663315(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663316(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663317(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663318(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663319(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663320(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663321(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663322(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663323(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663324(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663325(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663326(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663327(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663328(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663329(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663330(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663331(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663332(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663333(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663334(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663335(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663336(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663337(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663338(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663339(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663340(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663341(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663342(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663343(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663344(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663345(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663346(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663347(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663348(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663349(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663350(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663351(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663352(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663353(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663354(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663355(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663356(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663357(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663358(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663359(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663360(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663361(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663362(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663363(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663364(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663365(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663366(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663367(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663368(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663369(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663370(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663371(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663372(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663373(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663374(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663375(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663376(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663377(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663378(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663379(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663380(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663381(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663382(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663383(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663384(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663385(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663386(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663387(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663388(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663389(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663390(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663391(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663392(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663393(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663394(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663395(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663396(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663397(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663398(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663399(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663400(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663401(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663402(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663403(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663404(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663405(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663406(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663407(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663408(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663409(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663410(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663411(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663412(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663413(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663414(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663415(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663416(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663417(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663418(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663419(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663420(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663421(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663422(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663423(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663424(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663425(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663426(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663427(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663428(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663429(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663430(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663431(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663432(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663433(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663434(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663435(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663436(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663437(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663438(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663439(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663440(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663441(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663442(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663443(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663444(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663445(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663446(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663447(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663448(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663449(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663450(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663451(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663452(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663453(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663454(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663455(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663456(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663457(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663458(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663459(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663460(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663461(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663462(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663463(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663464(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663465(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663466(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663467(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663468(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663469(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663470(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663471(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663472(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663473(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663474(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663475(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663476(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663477(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663478(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663479(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663480(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663481(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663482(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663483(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663484(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663485(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663486(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663487(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663488(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663489(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663490(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663491(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663492(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663493(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663494(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663495(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663496(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663497(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663498(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663499(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663500(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663501(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663502(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663503(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663504(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663505(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663506(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663507(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663508(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663509(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663510(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663511(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663512(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663513(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663514(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663515(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663516(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663517(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663518(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663519(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663520(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663521(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663522(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663523(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663524(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663525(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663526(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663527(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663528(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663529(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663530(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663531(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663532(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663533(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663534(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663535(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663536(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663537(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663538(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663539(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663540(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663541(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663542(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663543(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663544(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663545(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663546(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663547(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663548(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663549(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663550(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663551(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663552(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663553(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663554(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663555(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663556(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663557(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663558(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663559(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663560(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663561(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663562(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663563(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663564(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663565(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663566(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663567(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663568(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663569(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663570(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663571(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663572(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663573(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663574(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663575(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663576(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663577(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663578(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663579(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663580(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663581(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663582(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663583(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663584(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663585(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663586(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663587(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663588(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663589(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663590(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663591(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663592(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663593(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663594(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663595(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663596(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663597(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663598(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663599(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663600(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663601(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663602(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663603(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663604(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663605(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663606(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663607(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663608(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663609(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663610(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663611(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663612(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663613(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663614(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663615(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663616(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663617(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663618(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663619(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663620(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663621(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663622(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663623(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663624(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663625(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663626(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663627(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663628(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663629(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663630(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663631(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663632(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663633(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663634(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663635(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663636(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663637(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663638(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663639(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663640(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663641(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663642(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663643(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663644(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663645(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663646(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663647(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663648(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663649(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663650(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663651(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663652(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663653(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663654(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663655(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663656(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663657(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663658(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663659(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663660(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663661(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663662(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663663(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663664(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663665(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663666(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663667(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663668(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663669(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663670(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663671(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663672(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663673(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663674(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663675(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663676(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663677(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663678(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663679(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663680(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663681(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663682(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663683(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663684(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663685(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663686(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663687(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663688(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663689(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663690(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663691(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663692(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663693(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663694(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663695(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663696(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663697(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663698(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663699(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663700(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663701(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663702(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663703(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663704(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663705(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663706(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663707(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663708(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663709(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663710(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663711(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663712(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663713(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663714(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663715(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663716(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663717(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663718(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663719(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663720(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663721(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663722(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663723(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663724(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663725(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663726(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663727(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663728(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663729(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663730(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663731(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663732(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663733(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663734(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663735(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663736(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663737(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663738(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663739(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663740(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663741(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663742(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663743(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663744(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663745(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663746(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663747(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663748(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663749(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663750(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663751(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663752(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663753(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663754(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663755(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663756(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663757(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663758(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663759(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663760(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663761(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663762(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663763(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663764(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663765(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663766(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663767(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663768(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663769(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663770(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663771(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663772(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663773(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663774(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663775(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663776(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663777(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663778(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663779(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663780(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663781(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663782(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663783(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663784(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663785(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663786(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663787(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663788(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663789(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663790(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663791(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663792(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663793(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663794(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663795(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663796(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663797(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663798(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663799(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663800(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663801(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663802(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663803(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663804(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663805(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663806(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663807(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663808(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663809(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663810(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663811(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663812(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663813(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663814(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663815(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663816(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663817(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663818(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663819(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663820(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663821(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663822(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663823(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663824(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663825(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663826(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663827(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663828(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663829(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663830(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663831(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663832(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663833(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663834(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663835(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663836(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663837(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663838(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663839(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663840(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663841(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663842(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663843(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663844(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663845(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663846(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663847(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663848(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663849(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663850(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663851(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663852(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663853(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663854(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663855(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663856(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663857(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663858(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663859(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663860(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663861(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663862(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663863(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663864(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663865(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663866(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663867(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663868(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663869(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663870(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663871(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663872(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663873(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663874(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663875(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663876(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663877(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663878(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663879(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663880(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663881(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663882(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663883(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663884(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663885(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663886(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663887(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663888(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663889(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663890(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663891(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663892(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663893(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663894(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663895(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663896(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663897(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663898(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663899(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663900(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663901(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663902(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663903(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663904(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663905(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663906(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663907(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663908(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663909(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663910(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663911(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663912(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663913(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663914(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663915(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663916(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663917(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663918(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663919(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663920(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663921(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663922(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663923(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663924(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663925(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663926(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663927(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663928(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663929(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663930(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663931(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663932(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663933(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663934(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663935(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663936(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663937(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663938(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663939(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663940(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663941(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663942(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663943(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663944(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663945(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663946(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663947(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663948(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663949(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663950(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663951(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663952(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663953(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663954(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663955(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663956(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663957(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663958(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663959(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663960(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663961(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663962(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663963(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663964(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663965(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663966(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663967(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663968(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663969(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663970(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663971(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663972(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663973(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663974(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663975(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663976(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663977(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663978(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663979(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663980(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663981(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663982(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663983(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663984(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663985(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663986(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663987(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663988(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663989(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663990(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663991(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663992(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663993(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663994(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663995(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663996(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663997(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663998(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1663999(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664000(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664001(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664002(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664003(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664004(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664005(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664006(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664007(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664008(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664009(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664010(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664011(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664012(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664013(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664014(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664015(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664016(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664017(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664018(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664019(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664020(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664021(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664022(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664023(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664024(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664025(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664026(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664027(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664028(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664029(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664030(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664031(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664032(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664033(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664034(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664035(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664036(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664037(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664038(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664039(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664040(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664041(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664042(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664043(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664044(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664045(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664046(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664047(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664048(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664049(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664050(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664051(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664052(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664053(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664054(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664055(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664056(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664057(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664058(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664059(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664060(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664061(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664062(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664063(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664064(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664065(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664066(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664067(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664068(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664069(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664070(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664071(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664072(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664073(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664074(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664075(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664076(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664077(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664078(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664079(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664080(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664081(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664082(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664083(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664084(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664085(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664086(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664087(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664088(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664089(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664090(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664091(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664092(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664093(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664094(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664095(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664096(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664097(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664098(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664099(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664100(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664101(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664102(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664103(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664104(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664105(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664106(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664107(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664108(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664109(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664110(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664111(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664112(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664113(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664114(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664115(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664116(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664117(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664118(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664119(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664120(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664121(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664122(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664123(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664124(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664125(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664126(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664127(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664128(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664129(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664130(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664131(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664132(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664133(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664134(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664135(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664136(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664137(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664138(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664139(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664140(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664141(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664142(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664143(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664144(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664145(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664146(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664147(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664148(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664149(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664150(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664151(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664152(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664153(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664154(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664155(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664156(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664157(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664158(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664159(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664160(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664161(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664162(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664163(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664164(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664165(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664166(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664167(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664168(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664169(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664170(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664171(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664172(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664173(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664174(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664175(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664176(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664177(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664178(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664179(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664180(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664181(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664182(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664183(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664184(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664185(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664186(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664187(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664188(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664189(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664190(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664191(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664192(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664193(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664194(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664195(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664196(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664197(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664198(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664199(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664200(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664201(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664202(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664203(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	new_node = transform_f1664204(node, block, dbgi);
	if (new_node != NULL) {
		return new_node;
	}
	return NULL;
}
